[tape]
alphabet = [a-z, A-Z, 0-9, _, $, ^]
# tape with the input text
T.0 = [^, a, b, c, _, t, e, t, e, s, _, d, a, l, s, z, y, _, t, e, k, s, t, _, t, e, s, t, _, p, r, z, y, k, l, a, d, $]
# tape with a pattern to find in the input text
T.1 = [^, t, e, s, t, $]
# tape representing the index in the input text, where the pattern starts (if final state is 'ok_znaleziono')
T.2 = [^, 0, 0, 0, $]

[program]
START przejdz_na_koniec_t2
END [ok_znaleziono, ok_nie_znaleziono, err_przepelnienie_licznika, err_bledna_wartosc_w_liczniku]

# main loop
# iterating over the tape 0 (tape with the input text)
wyszukiwanie {
    # if current value on tape 0 is '$', this means that we have reached the end of the input text and we didn't find the pattern in the text
    # go to the final state 'nie_znaleziono'
    IF (T.0 == "$") THEN {
        GOTO ok_nie_znaleziono {}
    }
    # if the current value on the tape 0 and 1 are equal, this means, that we have found a pattern candidate in the text
    # move both tapes, one value to the right, and continue the iteration
    ELIF (T.0 == T.1) THEN {
        GOTO dopasowanie {
            T.0: [T.0, MOV_R],
            T.1: [T.1, MOV_R],
        }
    }
    # if the current values on both tapes are different, just increment the index on tape 2
    ELSE {
        GOTO inkrementuj_t2 {
            T.1: [T.1, MOV_L],
        }
    }
}

dopasowanie {
    # if current value on tape 1 is '$', this means that we have reached the end of the pattern tape and we found the match in the input text
    # increment the index in tape 2 one more time to get the index of the first character of the pattern in the input text
    IF (T.1 == "$") THEN {
        GOTO ok_znaleziono {}
    }
    ELIF (T.0 == "$") THEN {
        GOTO ok_nie_znaleziono {}
    }
    ELIF (T.0 == T.1) THEN {
        GOTO dopasowanie {
            T.0: [T.0, MOV_R],
            T.1: [T.1, MOV_R],
        }
    } ELSE {
        GOTO przejdz_na_poczatek_t1 {
            T.0: [T.0, MOV_L],
            T.1: [T.1, MOV_L],
        }
    }
}

przejdz_na_poczatek_t1 {
    IF (T.1 == "^") THEN {
        GOTO wyszukiwanie {
            T.0: [T.0, MOV_R],
            T.1: [T.1, MOV_R],
        }
    } ELSE {
        GOTO inkrementuj_t2 {
            T.1: [T.1, MOV_L],
        }
    }
}

inkrementuj_t2 {
    IF (T.2 == "0") THEN {
         GOTO przejdz_na_koniec_t2 { T.2: ["1", STAY] }
    }
    ELIF (T.2 == "1") THEN {
         GOTO przejdz_na_koniec_t2 { T.2: ["2", STAY] }
    }
    ELIF (T.2 == "2") THEN {
         GOTO przejdz_na_koniec_t2 { T.2: ["3", STAY] }
    }
    ELIF (T.2 == "3") THEN {
         GOTO przejdz_na_koniec_t2 { T.2: ["4", STAY] }
    }
    ELIF (T.2 == "4") THEN {
         GOTO przejdz_na_koniec_t2 { T.2: ["5", STAY] }
    }
    ELIF (T.2 == "5") THEN {
         GOTO przejdz_na_koniec_t2 { T.2: ["6", STAY] }
    }
    ELIF (T.2 == "6") THEN {
         GOTO przejdz_na_koniec_t2 { T.2: ["7", STAY] }
    }
    ELIF (T.2 == "7") THEN {
         GOTO przejdz_na_koniec_t2 { T.2: ["8", STAY] }
    }
    ELIF (T.2 == "8") THEN {
         GOTO przejdz_na_koniec_t2 { T.2: ["9", STAY] }
    }
    ELIF (T.2 == "9") THEN {
        GOTO inkrementuj_t2 {
            T.2: ["0", MOV_L],
        }
    }
    ELIF (T.2 == "^") THEN {
        GOTO err_przepelnienie_licznika {}
    }
    ELSE {
        GOTO err_bledna_wartosc_w_liczniku {}
    }
}

przejdz_na_koniec_t2 {
    IF (T.2 == "$") THEN {
        GOTO przejdz_na_poczatek_t1 {
            T.2: [T.2, MOV_L],
        }
    } ELSE {
        GOTO przejdz_na_koniec_t2 {
            T.2: [T.2, MOV_R],
        }
    }
}

ok_znaleziono {}
ok_nie_znaleziono {}
err_przepelnienie_licznika {}
err_bledna_wartosc_w_liczniku {}

